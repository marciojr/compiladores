

import java_cup.runtime.*;
import main.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.List;
import java.util.LinkedList;
import ast.*;
import visitor.*;
//class AnalisadorSintatico

parser code {:
  protected Lexer lexer;
:}

init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};
scan with {: return lexer.next_token(); :};

terminal	String		INTEIRO;
terminal	String	FLUTUANTE;
terminal	String	IDENTIFICADOR;
terminal	String	COMENTARIO;
terminal			PONTOVIRGULA;
terminal			PONTO;
terminal			VIRGULA;
terminal			IGUAL;
terminal			PARENT_ESQ;
terminal			PARENT_DIR;
terminal			CURLY_ESQ;
terminal			CURLY_DIR;
terminal			COLCHE_ESQ;
terminal			COLCHE_DIR;
terminal			K_CLASS;
terminal			K_PUBLIC;
terminal			K_EXTENDS;
terminal			K_STATIC;
terminal			K_WHILE;
terminal			K_IF;
terminal			K_ELSE;
terminal			K_RETURN;
terminal			K_THIS;
terminal			K_NEW;
terminal			K_MAIN;
terminal			K_LENGTH;
terminal			K_PRINT;
terminal			OP_OR;
terminal			OP_AND;
terminal			OP_EQ;
terminal			OP_DIF;
terminal			OP_LT;
terminal			OP_LET;
terminal			OP_GT;
terminal			OP_GET;
terminal			T_VOID;
terminal			T_INT;
terminal			T_BOOLEAN;
terminal			T_STRING;
terminal			B_TRUE;
terminal			B_FALSE;
terminal			A_PLUS;
terminal			A_MINUS;
terminal			A_MULT;
terminal			A_DIV;
terminal			A_MOD;
terminal			OP_NOT;

non terminal Program Program;
non terminal MainClass MainClass;
non terminal ClassDeclList ClassDeclaration;
non terminal VarDecl VarDeclaration;
non terminal MethodDecl MethodDeclaration;
non terminal Type Type;
non terminal Statement Statement;
non terminal Exp Expression;
non terminal Identifier Identifier;
//novos
non terminal String ExprExtra,ExprColchet,JavaMethods,ExprOp;
non terminal StatementList SubStatement,MethodStatement;	
non terminal VarDeclList MethodVarDecl,ClassVariables;
non terminal ExpList ExprFuncVar,SubExprFuncVar;
non terminal FormalList MethodInputExtr,MethodInpDecl;
non terminal MethodDeclList ClassMethods;

precedence left A_MULT,OP_NOT,A_MINUS,A_PLUS;
precedence right COLCHE_ESQ,PONTO,OP_AND,OP_LT, PARENT_DIR;

start with Program;

Program				::=	MainClass:mc ClassDeclaration:cd					{:RESULT = new Program(mc,cd); :};
MainClass			::=	K_CLASS Identifier:i CURLY_ESQ K_PUBLIC K_STATIC T_VOID K_MAIN PARENT_ESQ T_STRING COLCHE_ESQ COLCHE_DIR Identifier:i2 PARENT_DIR CURLY_ESQ Statement:st CURLY_DIR CURLY_DIR
																			{: RESULT = new MainClass(i,i2,st); :};
ClassDeclaration	::=	ClassDeclaration:c K_CLASS Identifier:i K_EXTENDS Identifier:ex CURLY_ESQ ClassVariables:cv ClassMethods:cm CURLY_DIR
																			{: ClassDeclList nk = new ClassDeclList();
																				if(c!=null){
																				for(int a = 0; a < c.size(); a++){
																					nk.addElement(c.elementAt(a));	
																				}
																			}
																				nk.addElement(new ClassDeclExtends(i,ex,cv,cm));
																				RESULT = nk; :}
					|	ClassDeclaration:c1 K_CLASS Identifier:i CURLY_ESQ ClassVariables:cv ClassMethods:cm CURLY_DIR 
																			{: 	ClassDeclList nk = new ClassDeclList();
																				if(c1!=null){
																				for(int a = 0; a < c1.size(); a++){
																					nk.addElement(c1.elementAt(a));	
																				}
																			}
																				nk.addElement(new ClassDeclSimple(i,cv,cm));
																				RESULT = nk;	:}
					|														{: RESULT =  new ClassDeclList(); :};
ClassVariables		::=	VarDeclaration:v ClassVariables:c					{: 	VarDeclList nk = new VarDeclList();
																				nk.addElement(v);
																				if(c!=null){
																				for(int a = 0; a < c.size(); a++){
																					nk.addElement(c.elementAt(a));	
																				}
																			}
																				RESULT = nk; :}
					|														{: RESULT = new VarDeclList(); :};
ClassMethods		::= MethodDeclaration:m ClassMethods:c					{: MethodDeclList nk = new MethodDeclList();
																				nk.addElement(m);
																				if(c!=null){
																				for(int a = 0; a < c.size(); a++){
																					nk.addElement(c.elementAt(a));	
																				}
																			}
																				RESULT = nk; :}
					|														{: RESULT = new MethodDeclList(); :};
VarDeclaration		::=	Type:t Identifier:i PONTOVIRGULA					{: RESULT = new VarDecl(t,i); :};
MethodDeclaration	::=	K_PUBLIC Type:t Identifier:i PARENT_ESQ MethodInpDecl:m PARENT_DIR CURLY_ESQ MethodVarDecl:v MethodStatement:s K_RETURN Expression:ex PONTOVIRGULA CURLY_DIR
																			{: RESULT = new MethodDecl(t,i,m,v,s,ex); :};
MethodInpDecl		::=	Type:t Identifier:i MethodInputExtr:m											{:	FormalList nk = new FormalList();
																											nk.addElement(new Formal(t,i));
																											if(m!=null){
																											for(int a = 0; a < m.size(); a++){
																												nk.addElement(m.elementAt(a));	
																											}
																										}
																											RESULT = nk; :}
					|																					{: RESULT = new FormalList(); :};
MethodInputExtr		::= VIRGULA Type:t Identifier:i MethodInputExtr:m									{: FormalList nk = new FormalList();
																											nk.addElement(new Formal(t,i));
																											if(m!=null){
																											for(int a = 0; a < m.size(); a++){
																												nk.addElement(m.elementAt(a));	
																											}
																										}
																											RESULT = nk; :}
					|																					{: RESULT = new FormalList(); :};
MethodVarDecl		::= MethodVarDecl:m VarDeclaration:v												{: 	VarDeclList ak = new VarDeclList();
																											if(m!=null){
																											for(int a = 0; a < m.size(); a++){
																												ak.addElement(m.elementAt(a));	
																											}
																										}
																											ak.addElement(v);
																											RESULT = ak; :}							
					|																					{: RESULT = new VarDeclList(); :};
MethodStatement		::= Statement:s MethodStatement:m													{:	StatementList stmtList = new StatementList(); 
																											stmtList.addElement(s);
																											if(m!=null){
																											for(int a = 0; a < m.size(); a++){
																											stmtList.addElement(m.elementAt(a));	
																											}
																										}
																											RESULT = stmtList; :}
					|																					{: RESULT = new StatementList();; :};
Type				::=	T_INT COLCHE_ESQ COLCHE_DIR														{: RESULT = new IntArrayType(); :}
					|	T_BOOLEAN																		{: RESULT = new BooleanType(); :}
					|	T_INT																			{: RESULT = new IntegerType(); :}		
					|	Identifier:i																	{: RESULT = new IdentifierType(i.toString()); :};
Statement			::=	CURLY_ESQ SubStatement:s CURLY_DIR												{: RESULT = new Block(s); :}
					|	K_IF PARENT_ESQ Expression:e PARENT_DIR Statement:s1 K_ELSE Statement:s2		{: RESULT = new If(e,s1,s2); :}
					|	K_WHILE PARENT_ESQ Expression:e PARENT_DIR Statement:s							{: RESULT = new While(e,s); :}				
					|	K_PRINT PARENT_ESQ Expression:e PARENT_DIR PONTOVIRGULA							{: RESULT = new Print(e); :}
					|	Identifier:i IGUAL Expression:e PONTOVIRGULA									{: RESULT = new Assign(i,e); :}
					|	Identifier:i COLCHE_ESQ Expression:e COLCHE_DIR IGUAL Expression:d PONTOVIRGULA	{: RESULT = new ArrayAssign(i,e,d); :};
SubStatement		::=	Statement:s SubStatement:sa							{: 	StatementList 	stmtList = new StatementList(); 
																				stmtList.addElement(s);
																				if(sa!=null){
																				for(int a = 0; a < sa.size(); a++){
																					stmtList.addElement(sa.elementAt(a));	
																				}
																			}
																				RESULT = stmtList; :}
					|														{: RESULT = new StatementList(); :};
Expression			::=	Expression:e PONTO K_LENGTH							{: RESULT = new ArrayLength(e); :}
					|	Expression:e1 PONTO Identifier:i PARENT_ESQ ExprFuncVar:e2 PARENT_DIR 
					{: RESULT = new Call(e1,i,e2); :}
					|	Expression:e1 A_PLUS Expression:e2					{: RESULT = new Plus(e1,e2); :}
					|	Expression:e1 OP_AND Expression:e2					{: RESULT = new And(e1,e2); :}
					|	Expression:e1 OP_LT Expression:e2					{: RESULT = new LessThan(e1,e2); :}
					|	Expression:e1 A_MINUS Expression:e2					{: RESULT = new Minus(e1,e2); :}
					|	Expression:e1 A_MULT Expression:e2					{: RESULT = new Times(e1,e2); :}
					|	Expression:e1 COLCHE_ESQ Expression:e2 COLCHE_DIR	{: RESULT = new ArrayLookup(e1,e2); :}
					|	INTEIRO:l											{: RESULT = new IntegerLiteral(Integer.parseInt(l)); :}
					|	B_TRUE												{: RESULT = new True(); :}
					|	B_FALSE												{: RESULT = new False(); :}
					|	IDENTIFICADOR:i										{: RESULT = new IdentifierExp(i); :}
					|	K_THIS												{: RESULT = new This(); :}
					|	K_NEW T_INT COLCHE_ESQ Expression:e COLCHE_DIR		{: RESULT = new NewArray(e); :}
					|	K_NEW Identifier:i PARENT_ESQ PARENT_DIR			{: RESULT = new NewObject(i); :}
					|	OP_NOT Expression:e									{: RESULT = new Not(e); :}
					|	PARENT_ESQ Expression:e PARENT_DIR					{: RESULT = e; :};
ExprFuncVar			::=	Expression:e SubExprFuncVar:f						{: 	ExpList exprList = new ExpList();
																				exprList.addElement(e);
																				if(f!=null){
																					for(int a = 0; a < f.size(); a++){
																						exprList.addElement(f.elementAt(a));	
																					}
																				}
																				RESULT = exprList; :}
					|														{: RESULT = new ExpList(); :};
SubExprFuncVar		::=	VIRGULA Expression:e SubExprFuncVar:f				{:  ExpList exprList = new ExpList();
																				exprList.addElement(e);
																				if(f!=null){
																				for(int a = 0; a < f.size(); a++){
																					exprList.addElement(f.elementAt(a));	
																				}
																				}
																				RESULT = exprList; :}
					|														{: RESULT = new ExpList(); :};
Identifier			::=	IDENTIFICADOR:e										{: RESULT = new Identifier((String) e); :}; 