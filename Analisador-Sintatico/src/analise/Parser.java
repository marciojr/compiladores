package analise;


//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Nov 27 18:10:03 GMT-03:00 2015
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.List;
import java.util.LinkedList;
import ast.*;
import visitor.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Nov 27 18:10:03 GMT-03:00 2015
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\066\000\002\002\004\000\002\002\004\000\002\003" +
    "\023\000\002\004\013\000\002\004\011\000\002\004\002" +
    "\000\002\022\004\000\002\022\002\000\002\027\004\000" +
    "\002\027\002\000\002\005\005\000\002\006\017\000\002" +
    "\026\005\000\002\026\002\000\002\025\006\000\002\025" +
    "\002\000\002\021\004\000\002\021\002\000\002\020\004" +
    "\000\002\020\002\000\002\007\005\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\010\005\000\002" +
    "\010\011\000\002\010\007\000\002\010\007\000\002\010" +
    "\006\000\002\010\011\000\002\017\004\000\002\017\002" +
    "\000\002\011\005\000\002\011\010\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\006\000\002\011\003\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\007\000\002\011\006\000\002\011\004\000" +
    "\002\011\005\000\002\023\004\000\002\023\002\000\002" +
    "\024\005\000\002\024\002\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\004\022\006\001\002\000\004\002\223\001" +
    "\002\000\006\002\ufffc\022\ufffc\001\002\000\004\006\007" +
    "\001\002\000\024\006\uffcc\010\uffcc\012\uffcc\013\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\020\uffcc\024\uffcc\001\002\000\004" +
    "\016\011\001\002\000\004\023\012\001\002\000\004\025" +
    "\013\001\002\000\004\047\014\001\002\000\004\034\015" +
    "\001\002\000\004\014\016\001\002\000\004\052\017\001" +
    "\002\000\004\020\020\001\002\000\004\021\021\001\002" +
    "\000\004\006\007\001\002\000\004\015\023\001\002\000" +
    "\004\016\024\001\002\000\014\006\007\016\027\026\030" +
    "\027\031\036\025\001\002\000\004\014\136\001\002\000" +
    "\004\017\134\001\002\000\016\006\007\016\027\017\uffe2" +
    "\026\030\027\031\036\025\001\002\000\004\014\124\001" +
    "\002\000\004\014\116\001\002\000\006\013\033\020\034" +
    "\001\002\000\022\004\035\006\045\014\037\032\043\033" +
    "\044\053\036\054\042\062\040\001\002\000\022\004\035" +
    "\006\045\014\037\032\043\033\044\053\036\054\042\062" +
    "\040\001\002\000\030\010\uffd9\011\uffd9\012\uffd9\015\uffd9" +
    "\020\uffd9\021\uffd9\040\uffd9\043\uffd9\055\uffd9\056\uffd9\057" +
    "\uffd9\001\002\000\030\010\uffd8\011\uffd8\012\uffd8\015\uffd8" +
    "\020\uffd8\021\uffd8\040\uffd8\043\uffd8\055\uffd8\056\uffd8\057" +
    "\uffd8\001\002\000\022\004\035\006\045\014\037\032\043" +
    "\033\044\053\036\054\042\062\040\001\002\000\022\004" +
    "\035\006\045\014\037\032\043\033\044\053\036\054\042" +
    "\062\040\001\002\000\022\011\060\020\057\021\105\040" +
    "\054\043\061\055\056\056\062\057\055\001\002\000\030" +
    "\010\uffd7\011\uffd7\012\uffd7\015\uffd7\020\uffd7\021\uffd7\040" +
    "\uffd7\043\uffd7\055\uffd7\056\uffd7\057\uffd7\001\002\000\030" +
    "\010\uffd5\011\uffd5\012\uffd5\015\uffd5\020\uffd5\021\uffd5\040" +
    "\uffd5\043\uffd5\055\uffd5\056\uffd5\057\uffd5\001\002\000\006" +
    "\006\007\050\046\001\002\000\030\010\uffd6\011\uffd6\012" +
    "\uffd6\015\uffd6\020\uffd6\021\uffd6\040\uffd6\043\uffd6\055\uffd6" +
    "\056\uffd6\057\uffd6\001\002\000\004\020\052\001\002\000" +
    "\004\014\050\001\002\000\004\015\051\001\002\000\030" +
    "\010\uffd3\011\uffd3\012\uffd3\015\uffd3\020\uffd3\021\uffd3\040" +
    "\uffd3\043\uffd3\055\uffd3\056\uffd3\057\uffd3\001\002\000\022" +
    "\004\035\006\045\014\037\032\043\033\044\053\036\054" +
    "\042\062\040\001\002\000\022\011\060\020\057\021\063" +
    "\040\054\043\061\055\056\056\062\057\055\001\002\000" +
    "\022\004\035\006\045\014\037\032\043\033\044\053\036" +
    "\054\042\062\040\001\002\000\022\004\035\006\045\014" +
    "\037\032\043\033\044\053\036\054\042\062\040\001\002" +
    "\000\022\004\035\006\045\014\037\032\043\033\044\053" +
    "\036\054\042\062\040\001\002\000\022\004\035\006\045" +
    "\014\037\032\043\033\044\053\036\054\042\062\040\001" +
    "\002\000\006\006\007\035\066\001\002\000\022\004\035" +
    "\006\045\014\037\032\043\033\044\053\036\054\042\062" +
    "\040\001\002\000\022\004\035\006\045\014\037\032\043" +
    "\033\044\053\036\054\042\062\040\001\002\000\030\010" +
    "\uffd4\011\uffd4\012\uffd4\015\uffd4\020\uffd4\021\uffd4\040\uffd4" +
    "\043\uffd4\055\uffd4\056\uffd4\057\uffd4\001\002\000\030\010" +
    "\uffdc\011\060\012\uffdc\015\uffdc\020\057\021\uffdc\040\054" +
    "\043\061\055\uffdc\056\uffdc\057\uffdc\001\002\000\030\010" +
    "\uffdd\011\060\012\uffdd\015\uffdd\020\057\021\uffdd\040\054" +
    "\043\061\055\uffdd\056\uffdd\057\uffdd\001\002\000\030\010" +
    "\uffe1\011\uffe1\012\uffe1\015\uffe1\020\uffe1\021\uffe1\040\uffe1" +
    "\043\uffe1\055\uffe1\056\uffe1\057\uffe1\001\002\000\004\014" +
    "\070\001\002\000\024\004\035\006\045\014\037\015\uffcf" +
    "\032\043\033\044\053\036\054\042\062\040\001\002\000" +
    "\024\011\060\012\075\015\uffcd\020\057\040\054\043\061" +
    "\055\056\056\062\057\055\001\002\000\004\015\073\001" +
    "\002\000\030\010\uffe0\011\uffe0\012\uffe0\015\uffe0\020\uffe0" +
    "\021\uffe0\040\uffe0\043\uffe0\055\uffe0\056\uffe0\057\uffe0\001" +
    "\002\000\004\015\uffd0\001\002\000\022\004\035\006\045" +
    "\014\037\032\043\033\044\053\036\054\042\062\040\001" +
    "\002\000\024\011\060\012\075\015\uffcd\020\057\040\054" +
    "\043\061\055\056\056\062\057\055\001\002\000\004\015" +
    "\uffce\001\002\000\022\011\060\020\057\021\101\040\054" +
    "\043\061\055\056\056\062\057\055\001\002\000\030\010" +
    "\uffda\011\uffda\012\uffda\015\uffda\020\uffda\021\uffda\040\uffda" +
    "\043\uffda\055\uffda\056\uffda\057\uffda\001\002\000\030\010" +
    "\uffdf\011\060\012\uffdf\015\uffdf\020\057\021\uffdf\040\054" +
    "\043\061\055\uffdf\056\uffdf\057\uffdf\001\002\000\030\010" +
    "\uffdb\011\060\012\uffdb\015\uffdb\020\057\021\uffdb\040\054" +
    "\043\061\055\uffdb\056\uffdb\057\uffdb\001\002\000\030\010" +
    "\uffde\011\060\012\uffde\015\uffde\020\057\021\uffde\040\054" +
    "\043\061\055\uffde\056\uffde\057\uffde\001\002\000\004\013" +
    "\106\001\002\000\022\004\035\006\045\014\037\032\043" +
    "\033\044\053\036\054\042\062\040\001\002\000\022\010" +
    "\110\011\060\020\057\040\054\043\061\055\056\056\062" +
    "\057\055\001\002\000\022\006\uffe4\016\uffe4\017\uffe4\026" +
    "\uffe4\027\uffe4\030\uffe4\031\uffe4\036\uffe4\001\002\000\030" +
    "\010\uffd2\011\060\012\uffd2\015\uffd2\020\057\021\uffd2\040" +
    "\054\043\061\055\uffd2\056\uffd2\057\uffd2\001\002\000\022" +
    "\011\060\015\113\020\057\040\054\043\061\055\056\056" +
    "\062\057\055\001\002\000\030\010\uffd1\011\uffd1\012\uffd1" +
    "\015\uffd1\020\uffd1\021\uffd1\040\uffd1\043\uffd1\055\uffd1\056" +
    "\uffd1\057\uffd1\001\002\000\022\010\115\011\060\020\057" +
    "\040\054\043\061\055\056\056\062\057\055\001\002\000" +
    "\022\006\uffe5\016\uffe5\017\uffe5\026\uffe5\027\uffe5\030\uffe5" +
    "\031\uffe5\036\uffe5\001\002\000\022\004\035\006\045\014" +
    "\037\032\043\033\044\053\036\054\042\062\040\001\002" +
    "\000\022\011\060\015\120\020\057\040\054\043\061\055" +
    "\056\056\062\057\055\001\002\000\014\006\007\016\027" +
    "\026\030\027\031\036\025\001\002\000\004\030\122\001" +
    "\002\000\014\006\007\016\027\026\030\027\031\036\025" +
    "\001\002\000\022\006\uffe8\016\uffe8\017\uffe8\026\uffe8\027" +
    "\uffe8\030\uffe8\031\uffe8\036\uffe8\001\002\000\022\004\035" +
    "\006\045\014\037\032\043\033\044\053\036\054\042\062" +
    "\040\001\002\000\022\011\060\015\126\020\057\040\054" +
    "\043\061\055\056\056\062\057\055\001\002\000\014\006" +
    "\007\016\027\026\030\027\031\036\025\001\002\000\022" +
    "\006\uffe7\016\uffe7\017\uffe7\026\uffe7\027\uffe7\030\uffe7\031" +
    "\uffe7\036\uffe7\001\002\000\004\017\133\001\002\000\016" +
    "\006\007\016\027\017\uffe2\026\030\027\031\036\025\001" +
    "\002\000\004\017\uffe3\001\002\000\022\006\uffe9\016\uffe9" +
    "\017\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\036\uffe9\001" +
    "\002\000\004\017\135\001\002\000\006\002\uffff\022\uffff" +
    "\001\002\000\022\004\035\006\045\014\037\032\043\033" +
    "\044\053\036\054\042\062\040\001\002\000\022\011\060" +
    "\015\140\020\057\040\054\043\061\055\056\056\062\057" +
    "\055\001\002\000\004\010\141\001\002\000\022\006\uffe6" +
    "\016\uffe6\017\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6\036" +
    "\uffe6\001\002\000\006\002\000\022\143\001\002\000\004" +
    "\006\007\001\002\000\006\016\146\024\145\001\002\000" +
    "\004\006\007\001\002\000\014\006\007\017\ufffa\023\ufffa" +
    "\050\153\051\150\001\002\000\004\006\007\001\002\000" +
    "\004\006\uffec\001\002\000\014\006\007\017\ufffa\023\ufffa" +
    "\050\153\051\150\001\002\000\006\017\ufff8\023\160\001" +
    "\002\000\006\006\uffeb\020\155\001\002\000\004\006\uffea" +
    "\001\002\000\004\021\156\001\002\000\004\006\uffed\001" +
    "\002\000\006\017\ufff8\023\160\001\002\000\010\006\007" +
    "\050\153\051\150\001\002\000\004\017\162\001\002\000" +
    "\006\002\ufffd\022\ufffd\001\002\000\004\006\007\001\002" +
    "\000\004\014\165\001\002\000\012\006\007\015\ufff4\050" +
    "\153\051\150\001\002\000\004\006\007\001\002\000\004" +
    "\015\170\001\002\000\004\016\171\001\002\000\022\006" +
    "\ufff0\016\ufff0\026\ufff0\027\ufff0\031\ufff0\036\ufff0\050\ufff0" +
    "\051\ufff0\001\002\000\022\006\007\016\027\026\030\027" +
    "\031\031\uffee\036\025\050\153\051\150\001\002\000\022" +
    "\006\ufff1\016\ufff1\026\ufff1\027\ufff1\031\ufff1\036\ufff1\050" +
    "\ufff1\051\ufff1\001\002\000\004\031\200\001\002\000\010" +
    "\006\uffea\013\033\020\034\001\002\000\016\006\007\016" +
    "\027\026\030\027\031\031\uffee\036\025\001\002\000\004" +
    "\031\uffef\001\002\000\022\004\035\006\045\014\037\032" +
    "\043\033\044\053\036\054\042\062\040\001\002\000\022" +
    "\010\202\011\060\020\057\040\054\043\061\055\056\056" +
    "\062\057\055\001\002\000\004\017\203\001\002\000\006" +
    "\017\ufff6\023\ufff6\001\002\000\006\012\205\015\ufff2\001" +
    "\002\000\010\006\007\050\153\051\150\001\002\000\004" +
    "\015\ufff5\001\002\000\004\006\007\001\002\000\006\012" +
    "\205\015\ufff2\001\002\000\004\015\ufff3\001\002\000\004" +
    "\017\ufff9\001\002\000\006\017\ufffb\023\ufffb\001\002\000" +
    "\004\010\215\001\002\000\026\006\ufff7\016\ufff7\017\ufff7" +
    "\023\ufff7\026\ufff7\027\ufff7\031\ufff7\036\ufff7\050\ufff7\051" +
    "\ufff7\001\002\000\004\016\217\001\002\000\014\006\007" +
    "\017\ufffa\023\ufffa\050\153\051\150\001\002\000\006\017" +
    "\ufff8\023\160\001\002\000\004\017\222\001\002\000\006" +
    "\002\ufffe\022\ufffe\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\141\001\001\000\004\012\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\025\012\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\130\012\031\017\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\113\001\001\000\004\011\040\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\011\111\001" +
    "\001\000\004\011\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\052\001\001\000" +
    "\002\001\001\000\004\011\103\001\001\000\004\011\102" +
    "\001\001\000\004\011\101\001\001\000\004\011\077\001" +
    "\001\000\004\012\066\001\001\000\004\011\064\001\001" +
    "\000\004\011\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\070\023\071\001\001\000\004\024\073\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\075\001\001\000\004\024\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\106\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\116" +
    "\001\001\000\002\001\001\000\006\010\120\012\031\001" +
    "\001\000\002\001\001\000\006\010\122\012\031\001\001" +
    "\000\002\001\001\000\004\011\124\001\001\000\002\001" +
    "\001\000\006\010\126\012\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\130\012\031\017\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\143\001\001\000\002\001\001\000\004\012" +
    "\215\001\001\000\012\005\150\007\146\012\153\022\151" +
    "\001\001\000\004\012\213\001\001\000\002\001\001\000" +
    "\012\005\150\007\146\012\153\022\212\001\001\000\006" +
    "\006\156\027\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\156" +
    "\027\211\001\001\000\006\007\162\012\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\163\001\001" +
    "\000\002\001\001\000\010\007\165\012\153\026\166\001" +
    "\001\000\004\012\203\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\021\171\001\001\000\014\005\172\007" +
    "\146\010\175\012\174\020\173\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\175\012" +
    "\031\020\176\001\001\000\002\001\001\000\004\011\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\205\001\001\000\006\007\206\012\153" +
    "\001\001\000\002\001\001\000\004\012\207\001\001\000" +
    "\004\025\210\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\150\007\146\012\153\022\217" +
    "\001\001\000\006\006\156\027\220\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }


  protected Lexer lexer;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Identifier ::= IDENTIFICADOR 
            {
              Identifier RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier((String) e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Identifier",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SubExprFuncVar ::= 
            {
              ExpList RESULT =null;
		 RESULT = new ExpList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SubExprFuncVar",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SubExprFuncVar ::= VIRGULA Expression SubExprFuncVar 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList f = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  ExpList exprList = new ExpList();
																				exprList.addElement(e);
																				if(f!=null){
																				for(int a = 0; a < f.size(); a++){
																					exprList.addElement(f.elementAt(a));	
																				}
																				}
																				RESULT = exprList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SubExprFuncVar",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ExprFuncVar ::= 
            {
              ExpList RESULT =null;
		 RESULT = new ExpList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprFuncVar",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ExprFuncVar ::= Expression SubExprFuncVar 
            {
              ExpList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExpList f = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	ExpList exprList = new ExpList();
																				exprList.addElement(e);
																				if(f!=null){
																					for(int a = 0; a < f.size(); a++){
																						exprList.addElement(f.elementAt(a));	
																					}
																				}
																				RESULT = exprList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprFuncVar",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Expression ::= PARENT_ESQ Expression PARENT_DIR 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Expression ::= OP_NOT Expression 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Expression ::= K_NEW Identifier PARENT_ESQ PARENT_DIR 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new NewObject(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Expression ::= K_NEW T_INT COLCHE_ESQ Expression COLCHE_DIR 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new NewArray(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Expression ::= K_THIS 
            {
              Exp RESULT =null;
		 RESULT = new This(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expression ::= IDENTIFICADOR 
            {
              Exp RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierExp(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expression ::= B_FALSE 
            {
              Exp RESULT =null;
		 RESULT = new False(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expression ::= B_TRUE 
            {
              Exp RESULT =null;
		 RESULT = new True(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expression ::= INTEIRO 
            {
              Exp RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntegerLiteral(Integer.parseInt(l)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expression ::= Expression COLCHE_ESQ Expression COLCHE_DIR 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayLookup(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= Expression A_MULT Expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Times(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= Expression A_MINUS Expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Minus(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expression ::= Expression OP_LT Expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LessThan(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expression ::= Expression OP_AND Expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expression ::= Expression A_PLUS Expression 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Plus(e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expression ::= Expression PONTO Identifier PARENT_ESQ ExprFuncVar PARENT_DIR 
            {
              Exp RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExpList e2 = (ExpList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Call(e1,i,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Expression ::= Expression PONTO K_LENGTH 
            {
              Exp RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new ArrayLength(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SubStatement ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SubStatement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SubStatement ::= Statement SubStatement 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int saleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int saright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList sa = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	StatementList 	stmtList = new StatementList(); 
																				stmtList.addElement(s);
																				if(sa!=null){
																				for(int a = 0; a < sa.size(); a++){
																					stmtList.addElement(sa.elementAt(a));	
																				}
																			}
																				RESULT = stmtList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SubStatement",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Statement ::= Identifier COLCHE_ESQ Expression COLCHE_DIR IGUAL Expression PONTOVIRGULA 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp d = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayAssign(i,e,d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= Identifier IGUAL Expression PONTOVIRGULA 
            {
              Statement RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Assign(i,e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= K_PRINT PARENT_ESQ Expression PARENT_DIR PONTOVIRGULA 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Print(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= K_WHILE PARENT_ESQ Expression PARENT_DIR Statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new While(e,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= K_IF PARENT_ESQ Expression PARENT_DIR Statement K_ELSE Statement 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement s1 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Statement s2 = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new If(e,s1,s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= CURLY_ESQ SubStatement CURLY_DIR 
            {
              Statement RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Block(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= Identifier 
            {
              Type RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IdentifierType(i.toString()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Type ::= T_INT 
            {
              Type RESULT =null;
		 RESULT = new IntegerType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Type ::= T_BOOLEAN 
            {
              Type RESULT =null;
		 RESULT = new BooleanType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Type ::= T_INT COLCHE_ESQ COLCHE_DIR 
            {
              Type RESULT =null;
		 RESULT = new IntArrayType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MethodStatement ::= 
            {
              StatementList RESULT =null;
		 RESULT = new StatementList();; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodStatement",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MethodStatement ::= Statement MethodStatement 
            {
              StatementList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Statement s = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		StatementList m = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			StatementList stmtList = new StatementList(); 
																											stmtList.addElement(s);
																											if(m!=null){
																											for(int a = 0; a < m.size(); a++){
																											stmtList.addElement(m.elementAt(a));	
																											}
																										}
																											RESULT = stmtList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodStatement",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MethodVarDecl ::= 
            {
              VarDeclList RESULT =null;
		 RESULT = new VarDeclList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodVarDecl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MethodVarDecl ::= MethodVarDecl VarDeclaration 
            {
              VarDeclList RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclList m = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	VarDeclList ak = new VarDeclList();
																											if(m!=null){
																											for(int a = 0; a < m.size(); a++){
																												ak.addElement(m.elementAt(a));	
																											}
																										}
																											ak.addElement(v);
																											RESULT = ak; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodVarDecl",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MethodInputExtr ::= 
            {
              FormalList RESULT =null;
		 RESULT = new FormalList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodInputExtr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MethodInputExtr ::= VIRGULA Type Identifier MethodInputExtr 
            {
              FormalList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FormalList m = (FormalList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 FormalList nk = new FormalList();
																											nk.addElement(new Formal(t,i));
																											if(m!=null){
																											for(int a = 0; a < m.size(); a++){
																												nk.addElement(m.elementAt(a));	
																											}
																										}
																											RESULT = nk; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodInputExtr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MethodInpDecl ::= 
            {
              FormalList RESULT =null;
		 RESULT = new FormalList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodInpDecl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MethodInpDecl ::= Type Identifier MethodInputExtr 
            {
              FormalList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FormalList m = (FormalList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
			FormalList nk = new FormalList();
																											nk.addElement(new Formal(t,i));
																											if(m!=null){
																											for(int a = 0; a < m.size(); a++){
																												nk.addElement(m.elementAt(a));	
																											}
																										}
																											RESULT = nk; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodInpDecl",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // MethodDeclaration ::= K_PUBLIC Type Identifier PARENT_ESQ MethodInpDecl PARENT_DIR CURLY_ESQ MethodVarDecl MethodStatement K_RETURN Expression PONTOVIRGULA CURLY_DIR 
            {
              MethodDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		FormalList m = (FormalList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VarDeclList v = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		StatementList s = (StatementList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new MethodDecl(t,i,m,v,s,ex); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VarDeclaration ::= Type Identifier PONTOVIRGULA 
            {
              VarDecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(t,i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclaration",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ClassMethods ::= 
            {
              MethodDeclList RESULT =null;
		 RESULT = new MethodDeclList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassMethods",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ClassMethods ::= MethodDeclaration ClassMethods 
            {
              MethodDeclList RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodDecl m = (MethodDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		MethodDeclList c = (MethodDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 MethodDeclList nk = new MethodDeclList();
																				nk.addElement(m);
																				if(c!=null){
																				for(int a = 0; a < c.size(); a++){
																					nk.addElement(c.elementAt(a));	
																				}
																			}
																				RESULT = nk; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassMethods",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ClassVariables ::= 
            {
              VarDeclList RESULT =null;
		 RESULT = new VarDeclList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassVariables",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ClassVariables ::= VarDeclaration ClassVariables 
            {
              VarDeclList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDecl v = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarDeclList c = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	VarDeclList nk = new VarDeclList();
																				nk.addElement(v);
																				if(c!=null){
																				for(int a = 0; a < c.size(); a++){
																					nk.addElement(c.elementAt(a));	
																				}
																			}
																				RESULT = nk; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassVariables",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ClassDeclaration ::= 
            {
              ClassDeclList RESULT =null;
		 RESULT =  new ClassDeclList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ClassDeclaration ::= ClassDeclaration K_CLASS Identifier CURLY_ESQ ClassVariables ClassMethods CURLY_DIR 
            {
              ClassDeclList RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		ClassDeclList c1 = (ClassDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclList cv = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodDeclList cm = (MethodDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 	ClassDeclList nk = new ClassDeclList();
																				if(c1!=null){
																				for(int a = 0; a < c1.size(); a++){
																					nk.addElement(c1.elementAt(a));	
																				}
																			}
																				nk.addElement(new ClassDeclSimple(i,cv,cm));
																				RESULT = nk;	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ClassDeclaration ::= ClassDeclaration K_CLASS Identifier K_EXTENDS Identifier CURLY_ESQ ClassVariables ClassMethods CURLY_DIR 
            {
              ClassDeclList RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		ClassDeclList c = (ClassDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Identifier ex = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		VarDeclList cv = (VarDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cmleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MethodDeclList cm = (MethodDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 ClassDeclList nk = new ClassDeclList();
																				if(c!=null){
																				for(int a = 0; a < c.size(); a++){
																					nk.addElement(c.elementAt(a));	
																				}
																			}
																				nk.addElement(new ClassDeclExtends(i,ex,cv,cm));
																				RESULT = nk; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MainClass ::= K_CLASS Identifier CURLY_ESQ K_PUBLIC K_STATIC T_VOID K_MAIN PARENT_ESQ T_STRING COLCHE_ESQ COLCHE_DIR Identifier PARENT_DIR CURLY_ESQ Statement CURLY_DIR CURLY_DIR 
            {
              MainClass RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-15)).right;
		Identifier i = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-15)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Identifier i2 = (Identifier)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Statement st = (Statement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new MainClass(i,i2,st); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainClass",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-16)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= MainClass ClassDeclaration 
            {
              Program RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		MainClass mc = (MainClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ClassDeclList cd = (ClassDeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new Program(mc,cd); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

